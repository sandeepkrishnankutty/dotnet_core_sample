# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  BuildConfiguration: 'Release'
  BuildPlatform: 'any cpu'
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages


pool:
  vmImage: windows-latest

stages:
  - stage: build
    displayName: Build
    
    jobs:
    - job: build
      steps:
      
      - task: Cache@2
        inputs:
          key: 'nuget | "$(Agent.OS)" | $(Build.SourcesDirectory)/packages.lock.json'
          restoreKeys: |
            nuget | "$(Agent.OS)"
            nuget
          path: $(NUGET_PACKAGES)
        displayName: Cache NuGet packages
      - task: DotNetCoreCLI@2
        displayName: Restore
        condition: ne(variables.CACHE_RESTORED, true)
        inputs:
          command: restore
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: Build
        inputs:
          projects: '**/*.csproj'
          arguments: '--configuration $(BuildConfiguration)'

      - task: DotNetCoreCLI@2
        displayName: Publish
        inputs:
          command: publish
          publishWebProjects: True
          arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
          zipAfterPublish: True

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Artifact'
        inputs:
          targetPath: '$(build.artifactstagingdirectory)'
          ArtifactName: drop
        condition: succeededOrFailed()

      - task: PublishPipelineArtifact@1
        displayName: 'Publish Operations'
        inputs:
          targetPath: operations
          ArtifactName: operations
        condition: succeededOrFailed()
  
  - stage: deploy
    displayName: deploy
    jobs:
    - deployment: build
      displayName: Deploy 
      environment: 'Test Environment'

      strategy:
        runOnce:
          deploy:
            steps:
            - task: PowerShell@2
              inputs:
                targetType: 'inline'
                script: |
                  test-path $(System.DefaultWorkingDirectory)\operations\template.json
                  pwd
                  write-host "Path is $(Pipeline.Workspace)"
                  write-host "System path $(System.DefaultWorkingDirectory)"
            
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  # Write your commands here
                  
                  ls
            
            - task: CmdLine@2
              inputs:
                script: |
                  echo  '$(System.DefaultWorkingDirectory)'
                  dir $(Pipeline.Workspace)
              